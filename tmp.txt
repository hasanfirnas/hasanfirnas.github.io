function main(workbook: ExcelScript.Workbook) {
  const table = workbook.getWorksheet("Sheet1").getTable("OfficeForm.Table");

  // Get headers and data
  const headers = table.getHeaderRowRange().getValues()[0] as string[];
  const dataRange = table.getRangeBetweenHeaderAndTotal();
  const data = dataRange.getValues();

  // Find 'Id' column index
  const idColIndex = headers.indexOf("Id");
  if (idColIndex === -1) throw new Error("Couldn't find 'Id' column");

  // STEP 1: Detect RITM Column
  const ritmRegex = /^RITM\d{4,}$/i;
  let ritmColIndex = -1;
  let maxCount = 0;

  headers.forEach((_, colIndex) => {
    let count = 0;
    for (let row of data) {
      const cell = row[colIndex]?.toString().trim();
      if (ritmRegex.test(cell)) count++;
    }
    if (count > maxCount) {
      maxCount = count;
      ritmColIndex = colIndex;
    }
  });

  if (ritmColIndex === -1) throw new Error("No RITM column detected.");
  console.log(`‚úÖ RITM column detected: ${String.fromCharCode(65 + ritmColIndex)} (${headers[ritmColIndex]})`);

  // STEP 2: Group rows by RITM
  const ritmGroups: Record<string, { rowIndex: number, id: number }[]> = {};

  for (let i = 0; i < data.length; i++) {
    const row = data[i];
    const ritmRaw = row[ritmColIndex]?.toString().trim();
    const idRaw = row[idColIndex]?.toString().trim();

    if (ritmRegex.test(ritmRaw) && !isNaN(Number(idRaw))) {
      const ritm = ritmRaw.toUpperCase();
      const id = Number(idRaw);
      if (!ritmGroups[ritm]) ritmGroups[ritm] = [];
      ritmGroups[ritm].push({ rowIndex: i, id });
    }
  }

  // STEP 3: For each group, print decisions
  for (const ritm in ritmGroups) {
    const entries = ritmGroups[ritm];
    if (entries.length <= 1) continue; // Nothing to strike

    // Sort by ID (ascending)
    entries.sort((a, b) => a.id - b.id);
    const keeper = entries[entries.length - 1]; // Max ID is kept

    console.log(`\nüîç RITM: ${ritm}`);
    console.log(`‚û°Ô∏è Keeping ID: ${keeper.id} (Row ${keeper.rowIndex + 2})`);
    console.log(`üóëÔ∏è Marking these for strikethrough:`);

    for (let entry of entries) {
      if (entry.id !== keeper.id) {
        console.log(`  - ID: ${entry.id} (Row ${entry.rowIndex + 2})`);
        
        // Commented action line ‚Äî uncomment once you're confident
        // const rowRange = dataRange.getCell(entry.rowIndex, 0).getEntireRow();
        // rowRange.getFormat().getFont().setColor("red");
        // rowRange.getFormat().setStrikethrough(true);
      }
    }
  }

  console.log(`\n‚úÖ Debug pass complete. No changes applied ‚Äî strike/highlight lines are commented out.`);
}
